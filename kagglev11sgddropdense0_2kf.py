# -*- coding: utf-8 -*-
"""kagglev11sgdDropDense0.2kf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18NW5x3bNxlpbUUFi3NDNdQcJRdou76Yp
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

train=np.load("./drive/My Drive/audio_train.npy")
test=np.load("./drive/My Drive/audio_test.npy")

train_labels=pd.read_csv("./drive/My Drive/labels_train.csv")
sample_submission=pd.read_csv("./drive/My Drive/sample_submission.csv")

train_labels

label = list(train_labels['label'])

y_train = np.empty([len(train),1])
for i in range(len(label)):
  y_train[i] = label[i]
y_train = np.array(y_train, dtype='uint8')

num_classes = 10
y_train = keras.utils.to_categorical(y_train, num_classes)



plt.plot(train[2])

print(train_labels.label.unique())

print(sample_submission.label.unique())

print(np.shape(test)[1])

verbose, epochs, batch_size = 1, 10, 32

n_timesteps, n_features, n_outputs = train.shape[0], train.shape[1], train_labels.shape[0]

n_timesteps

train.shape[0],train.shape[1]

train1=np.reshape(train,(train.shape[0],500,60))
train1.shape

test1=np.reshape(test,(test.shape[0],500,60))
test1.shape

train_labels.shape

train.shape[1]

model = models.Sequential()
model.add(layers.Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(500,60)))
model.add(layers.Conv1D(filters=64, kernel_size=3, activation='relu'))
#model.add(layers.Dropout(0.5))
model.add(layers.MaxPooling1D(pool_size=15))
model.add(layers.Flatten())
model.add(layers.Dense(100, activation='relu'))
model.add(layers.Dropout(0.2))
model.add(layers.Dense(100, activation='relu'))
model.add(layers.Dropout(0.2))
model.add(layers.Dense(10, activation='softmax'))

model.summary()

from scipy import misc
import sklearn
import os

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

train_x, test_x, train_y, test_y = train_test_split(train1, y_train, random_state = 101, test_size=0.25)

def fit_and_evaluate(t_x, val_x, t_y, val_y, EPOCHS=200, BATCH_SIZE=128):
    results = model.fit(t_x, t_y, epochs=EPOCHS, batch_size=BATCH_SIZE, 
              verbose=1, validation_split=0.1)  
    print("Val Score: ", model.evaluate(val_x, val_y))
    return results

model.compile(optimizer='sgd',
              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False),
              metrics=['accuracy'])

n_folds=4
epochs=200
batch_size=128

#save the model history in a list after fitting so that we can plot later
model_history = [] 

for i in range(n_folds):
    print("Training on Fold: ",i+1)
    t_x, val_x, t_y, val_y = train_test_split(train_x, train_y, test_size=0.1, 
                                               random_state = np.random.randint(1,1000, 1)[0])
    model_history.append(fit_and_evaluate(t_x, val_x, t_y, val_y, epochs, batch_size))
    print("======="*12, end="\n\n\n")

model.compile(optimizer='sgd',
              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False),
              metrics=['accuracy'])

history = model.fit(train1, y_train, epochs=500)

pred = model.predict(test1)

np.argmax(pred[1])

pred.shape

predLabel = np.empty([len(test),2],dtype=int)
for i in range(len(pred)):
  predLabel[i][0] = np.int(i)
  predLabel[i][1] = np.int(np.argmax(pred[i]))

df = pd.DataFrame(predLabel, columns= ['id', 'label'])

df.to_csv (r'haiqzhu11.csv', index = False, header=True)

sample_submission

df